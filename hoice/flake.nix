# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.8)
{

  # Flake inputs
  inputs = {
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*.tar.gz";

    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*.tar.gz";

    hoice = {
      url = "github:hopv/hoice";
      flake = false;
    };

    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  # Flake outputs that other flakes can use
  outputs = { self, flake-schemas, nixpkgs, hoice, rust-overlay }:
    let
      # Nixpkgs overlays
      overlays = [
        rust-overlay.overlays.default
        (final: prev: {
          rustToolchain = final.rust-bin.stable.latest.default;
        })
      ];

      # Helpers for producing system-specific outputs
      supportedSystems = [ "x86_64-linux" "aarch64-darwin" ];
      forEachSupportedSystem = f: nixpkgs.lib.genAttrs supportedSystems (system: f {
        pkgs = import nixpkgs { inherit overlays system; };
      });
    in {
      # Schemas tell Nix about the structure of your flake's outputs
      schemas = flake-schemas.schemas;

      packages = forEachSupportedSystem ({ pkgs }:
        let hoice-package  = pkgs.rustPlatform.buildRustPackage {
              name = "hoice";
              src = hoice;
              cargoLock = {
                lockFile = "${hoice-package.src}/Cargo.lock";
                outputHashes = {
                  "mylib-0.1.0" = "sha256-jkJk5nGTGfQoVhOHo5Zx9Ha19iA7OoV2b6mq4Fw1WA4=";
                };
              };
              buildInputs = [ pkgs.makeWrapper ];
              # The CI for hoice uses z3 4.8.17 so I'm using pkgs.z3_4_8 (which is 4.8.17)
              postFixup = ''
                wrapProgram $out/bin/hoice \
                --set PATH ${pkgs.lib.makeBinPath [ pkgs.z3_4_8 ]}
                '';
              # Currently cargo test fails
              doCheck = false;
              #nativeCheckInputs = [ pkgs.z3 ];
            };
        in
          {
            hoice = hoice-package;
            default = hoice-package;
          });

      # Development environments
      devShells = forEachSupportedSystem ({ pkgs }: {
        default = pkgs.mkShell {
          # Pinned packages available in the environment
          packages = with pkgs; [
            rustToolchain
            rust-analyzer
            curl
            git
            nixpkgs-fmt
	          z3
          ];
          # Environment variables
          env = {
            RUST_BACKTRACE = "1";
          };
        };
      });
    };
}
